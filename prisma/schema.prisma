generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOWN_DATABASE_URL")
}

model Profile {
    id       Int            @id @default(autoincrement())
    name     String
    clients  Client[]
    managers SalesManager[]
}

model Client {
    id            Int             @id @default(autoincrement())
    username      String          @unique
    email         String          @unique
    password      String
    image         String?
    profileId     Int
    profile       Profile         @relation(fields: [profileId], references: [id])
    // chatId        Int             @unique
    // chat          Chat            @relation(fields: [chatId], references: [id])
    products      ClientProduct[]
    favorites     Favorite[]
    likes         Like[]
    notifications Notification[]
    orders        Order[]
    Comment       Comment[]

    @@index([profileId], map: "Client_profileId_fkey")
}

// model Chat {
//     id Int @id @default(autoincrement())

//     Client Client?
// }

model Notification {
    id       Int      @id @default(autoincrement())
    message  String
    date     DateTime @default(now())
    clientId Int
    client   Client   @relation(fields: [clientId], references: [id])

    @@index([clientId], map: "Notification_clientId_fkey")
}

model SalesManager {
    id        Int     @id @default(autoincrement())
    username  String  @unique
    password  String
    profileId Int
    profile   Profile @relation(fields: [profileId], references: [id])

    @@index([profileId], map: "SalesManager_profileId_fkey")
}

model Product {
    id          Int             @id @default(autoincrement())
    name        String
    categoryId  Int
    stock       Int
    price       Float
    description String?
    image       String?
    available   Boolean         @default(true)
    timesBought Int             @default(0)
    visits      Int             @default(0)
    clients     ClientProduct[]
    comments    Comment[]
    discount    Discount?
    favorites   Favorite[]
    last        Last?
    likes       Like[]
    category    Category        @relation(fields: [categoryId], references: [id])
    orders      ProductOrder[]

    @@index([categoryId], map: "Product_categoryId_fkey")
}

model Discount {
    id         Int     @id @default(autoincrement())
    percentage Int
    productId  Int     @unique
    product    Product @relation(fields: [productId], references: [id])
}

model Last {
    id        Int     @id @default(autoincrement())
    productId Int     @unique
    product   Product @relation(fields: [productId], references: [id])
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String
    products Product[]
}

model Comment {
    id        Int       @id @default(autoincrement())
    message   String
    date      DateTime  @default(now())
    clientId  Int
    client    Client    @relation(fields: [clientId], references: [id])
    productId Int
    product   Product   @relation(fields: [productId], references: [id])
    response  Response?

    @@index([productId], map: "Comment_productId_fkey")
}

model Response {
    id        Int      @id @default(autoincrement())
    message   String
    date      DateTime @default(now())
    commentId Int      @unique
    comment   Comment  @relation(fields: [commentId], references: [id])
}

model Order {
    id            Int            @id @default(autoincrement())
    paymentMethod String
    paymentId     String?
    address       String
    date          DateTime       @default(now())
    state         String         @default("pendiente de pago") // Pendiente de pago, pago aprobado, entregado
    clientId      Int
    client        Client         @relation(fields: [clientId], references: [id])
    products      ProductOrder[]

    @@index([clientId], map: "Order_clientId_fkey")
}

model ClientProduct {
    clientId  Int
    productId Int
    amount    Int
    client    Client  @relation(fields: [clientId], references: [id])
    product   Product @relation(fields: [productId], references: [id])

    @@id([clientId, productId])
    @@index([productId], map: "ClientProduct_productId_fkey")
}

model Favorite {
    clientId  Int
    productId Int
    client    Client  @relation(fields: [clientId], references: [id])
    product   Product @relation(fields: [productId], references: [id])

    @@id([clientId, productId])
    @@index([productId], map: "Favorite_productId_fkey")
}

model Like {
    clientId  Int
    productId Int
    client    Client  @relation(fields: [clientId], references: [id])
    product   Product @relation(fields: [productId], references: [id])

    @@id([clientId, productId])
    @@index([productId], map: "Like_productId_fkey")
}

model ProductOrder {
    productId Int
    orderId   Int
    amount    Int
    order     Order   @relation(fields: [orderId], references: [id])
    product   Product @relation(fields: [productId], references: [id])

    @@id([productId, orderId])
    @@index([orderId], map: "ProductOrder_orderId_fkey")
}
